var searchIndex = JSON.parse('{\
"bud":{"doc":"","t":[12,3,3,3,13,13,7,7,7,7,13,3,4,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,5,5,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,14,14,11,11,11,12,12],"n":["0","Args","BudPrompt","BudValidator","CommandLine","Counter","DEFAULT_MULTILINE_INDICATOR","DEFAULT_PROMPT_INDICATOR","DEFAULT_VI_INSERT_PROMPT_INDICATOR","DEFAULT_VI_NORMAL_PROMPT_INDICATOR","File","SourceCache","SourceId","augment_args","augment_args_for_update","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","cmp","command","command_for_update","default","display","entries","eq","eval","fetch","fmt","fmt","from","from","from","from","from","from_arg_matches","from_arg_matches_mut","group_id","hash","into","into","into","into","into","main","partial_cmp","print_error","print_value","register","render_prompt_history_search_indicator","render_prompt_indicator","render_prompt_left","render_prompt_multiline_indicator","render_prompt_right","source_file","to_owned","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","unwrap_or_print_error","unwrap_or_print_error_and_exit","update_from_arg_matches","update_from_arg_matches_mut","validate","0","0"],"q":["bud","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","bud::SourceId",""],"d":["","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"i":[3,0,0,0,2,2,0,0,0,0,2,0,0,13,13,27,13,2,5,3,27,13,2,5,3,2,3,2,3,2,13,13,5,5,5,2,13,5,13,2,27,13,2,5,3,13,13,13,2,27,13,2,5,3,0,2,0,0,5,3,3,3,3,3,13,2,3,27,13,2,5,3,27,13,2,5,3,27,13,2,5,3,0,0,13,13,27,29,30],"f":[0,0,0,0,0,0,0,0,0,0,0,0,0,[1,1],[1,1],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[2,2],[3,3],[[]],[[]],[[2,2],4],[[],1],[[],1],[[],5],[[5,2],[[8,[[7,[6]]]]]],0,[[2,2],9],0,[[5,2],[[12,[10,[7,[11]]]]]],[[13,14],15],[[2,14],15],[[]],[[]],[[]],[[]],[[]],[16,[[12,[13,17]]]],[16,[[12,[13,17]]]],[[],[[8,[18]]]],[2],[[]],[[]],[[]],[[]],[[]],[[],19],[[2,2],[[8,[4]]]],[[2,5,[21,[20]]],19],[[9,20]],[[5,2,22]],[[3,23],[[24,[22]]]],[[3,25],[[24,[22]]]],[3,[[24,[22]]]],[3,[[24,[22]]]],[3,[[24,[22]]]],0,[[]],[[]],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],12],[[],26],[[],26],[[],26],[[],26],[[],26],0,0,[[13,16],[[12,[17]]]],[[13,16],[[12,[17]]]],[[27,22],28],0,0],"p":[[3,"Command"],[4,"SourceId"],[3,"BudPrompt"],[4,"Ordering"],[3,"SourceCache"],[8,"Display"],[3,"Box"],[4,"Option"],[15,"bool"],[3,"Source"],[8,"Debug"],[4,"Result"],[3,"Args"],[3,"Formatter"],[6,"Result"],[3,"ArgMatches"],[6,"Error"],[3,"Id"],[6,"Result"],[4,"Value"],[4,"Error"],[15,"str"],[3,"PromptHistorySearch"],[4,"Cow"],[4,"PromptEditMode"],[3,"TypeId"],[3,"BudValidator"],[4,"ValidationResult"],[13,"Counter"],[13,"File"]]},\
"budlang":{"doc":"A safe, fast, lightweight embeddable scripting language …","t":[13,4,13,13,0,11,11,11,11,11,11,11,11,11,11,11,11,11,11,0,11,0,0,11,0,11,11,11,11,11,0,12,12,12,13,3,3,4,3,3,3,3,13,4,3,4,13,3,3,13,3,13,3,3,4,3,3,13,13,3,13,3,13,13,13,13,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,12,11,12,12,12,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,11,11,12,12,12,12,12,12,12,13,13,13,13,13,13,13,13,13,13,3,3,13,4,4,4,13,16,3,13,13,13,4,13,13,13,3,13,4,13,4,13,3,3,3,13,13,13,13,13,13,8,4,4,13,13,13,13,3,4,3,13,13,13,13,13,13,12,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,12,12,11,10,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,12,10,12,11,12,12,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,3,4,3,13,3,13,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,13,13,4,3,13,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,5,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,8,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,13,13,13,13,13,13,3,3,13,13,13,3,3,13,4,4,13,4,13,3,13,13,13,3,8,8,13,4,3,13,4,4,3,8,3,13,13,3,13,4,13,13,4,13,13,13,13,13,13,13,13,3,16,13,16,13,8,13,13,13,13,13,3,13,3,13,13,13,13,13,3,13,13,13,13,16,3,13,13,13,13,4,13,13,4,4,13,4,13,13,13,13,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,10,11,11,11,11,10,11,11,11,11,12,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,12,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Compilation","Error","Fault","Parse","ast","borrow","borrow_mut","clone","clone_into","eq","expect_no_pause","fmt","fmt","from","from","from","from","from","into","ir","location","map","parser","provide","symbol","to_owned","to_string","try_from","try_into","type_id","vm","0","0","0","Add","Assign","BinOp","BinOpKind","Block","Break","Call","CodeUnit","Compare","CompilationError","Continue","Declaration","Divide","ExpressionTree","Function","Function","If","InvalidScope","List","Loop","LoopParameters","Map","Mapping","Module","Multiply","NodeId","Sub","SyntaxTreeBuilder","UndefinedFunction","UndefinedIdentifier","Until","While","assign_node","binop_node","body","boolean","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_node","build","call","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","compare_node","compile","continue_node","default","default","eq","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tree","generate_code","global","identifier","if_node","integer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key","list_node","loop_node","map_node","mappings","name","name","name","name","new","new","new","new","on","parameters","provide","real","recurse","return_node","statements","string","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","value","values","with","with_else","0","0","0","0","0","0","0","Add","Add","Argument","Argument","Argument","Argument","Boolean","Call","CallInstance","CallIntrinsic","CodeBlock","CodeBlockBuilder","Compare","CompareAction","DagNode","Destination","Divide","Environment","Function","Function","Function","If","Instruction","Integer","JumpIfFalse","JumpTo","Label","Label","Literal","Literal","LiteralOrSource","Load","LoopInfo","LoopScope","Mapping","Multiply","PopAndDrop","Push","Real","Return","Return","Scope","ScopeSymbol","ScopeSymbolKind","Stack","Store","String","Sub","UnlinkedCodeUnit","ValueSource","Variable","Variable","Variable","Variable","Variable","Variable","Void","args","begin_loop","body","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","break_label","break_label","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","compile","compile_into","continue_label","continue_label","default","define_function","define_variable","deref","deref_mut","drop","execute_in","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","index","init","instantiate","instantiate","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","key","label","label_break","label_continue","link","link","load_from_symbol","lookup","loop_info","loop_result","map_each_symbol","modules","name","name","name","new","new","new_label","new_temporary_variable","push","push_from_symbol","resolve_function_vtable_index","store_into_destination","symbol","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","value","variable_index_from_name","variables","vtable","0","0","0","0","0","0","0","action","arg_count","arg_count","arg_count","comparison","condition","destination","destination","destination","destination","destination","destination","destination","false_jump_to","function","intrinsic","left","left","left","left","left","name","right","right","right","right","right","target","value","variable","0","0","0","0","0","0","0","0","0","function","0","0","BudMap","Entry","Iter","Occupied","OccupiedEntry","Vacant","VacantEntry","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone_into","default","entry","fmt","from","from","from","from","from","get","get_by_index","insert","insert","into","into","into","into","into","into_iter","is_empty","iter","key","len","next","remove","remove","replace","to_owned","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","value","with_capacity","with_capacity_and_hasher","with_hasher","0","0","ExpectedEndOfLine","MissingEnd","ParseError","Token","Unexpected","UnexpectedEof","borrow","borrow","borrow_mut","borrow_mut","clone","clone","clone_into","clone_into","eq","eq","fmt","fmt","fmt","fmt","from","from","into","into","location","parse","provide","to_owned","to_owned","to_string","to_string","try_from","try_from","try_into","try_into","type_id","type_id","0","0","error_location","found","kind","offset","open_offset","OptionalSymbol","Symbol","as_str","borrow","borrow_mut","clone","clone_into","deref","eq","eq","eq","fmt","fmt","from","from","hash","into","into_symbol","into_symbol","to_owned","to_string","try_from","try_into","type_id","Add","Argument","Argument","ArgumentMissing","Boolean","Boolean","Bud","Budgeted","Call","CallInstance","CallIntrinsic","CodeBlock","CodeBlockDisplay","Compare","CompareAction","Comparison","Continue","Destination","Divide","Dynamic","Dynamic","Dynamic","Dynamic","DynamicFault","DynamicValue","Environment","Equal","ExecutionBehavior","Fault","Fault","FaultKind","FaultOrPause","FaultStackFrame","FromStack","Function","GreaterThan","GreaterThanOrEqual","HashMap","If","Instruction","Integer","Integer","Intrinsic","InvalidArgumentIndex","InvalidType","InvalidVariableIndex","InvalidVtableIndex","JumpIfFalse","JumpTo","LessThan","LessThanOrEqual","List","List","Load","Map","Multiply","NativeFunction","NewList","NewMap","NotEqual","Pause","Pause","PausedExecution","PopAndDrop","PoppedValues","Push","Real","Real","Return","Return","Stack","Stack","StackOverflow","StackUnderflow","Store","String","StringLiteralDisplay","Sub","TooManyArguments","TypeMismatch","UnknownFunction","Value","Value","ValueCannotBeHashed","ValueKind","ValueOrSource","ValueOutOfRange","ValueSource","Variable","Variable","Variable","Void","Void","add_budget","arg_count","as_dynamic","as_f64","as_i64","as_str","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","call","call","call","call","checked_add","checked_add","checked_add","checked_div","checked_div","checked_div","checked_mul","checked_mul","checked_mul","checked_sub","checked_sub","checked_sub","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","default","default","default","default","default","default_for","define_function","define_native_function","define_variable","display_indented","downcast_ref","drop","dynamic","dynamic","empty","environment","environment","environment_mut","environment_mut","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","eq","evaluate","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_iter","from_value","from_value","from_value","from_value","get","get","grow_by","hash","hash","hash","hash","hash","implements_hash","index","index_mut","inner","insert","instruction_index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_dynamic","into_inner","into_inner","into_inner","into_iter","invalid_type","invoke","is_empty","is_empty","is_empty","is_falsey","is_falsey","is_truthy","is_truthy","is_truthy","is_truthy","is_truthy","kind","kind","kind","kind","kind","kind","len","len","len","map_each_symbol","name","new","new","new","new","new","new","new","next","next_argument","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_cmp","partial_eq","partial_eq","partial_eq","partial_eq","partial_eq","pop","pop_back","pop_front","pop_n","provide","provide","push","push_back","push_front","remaining_capacity","remove","remove","resolve_function_vtable_index","resume","run","run_source","size_hint","stack","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_source","to_source","to_source","to_source","to_source","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","to_string","top","top_mut","truncate","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_hash","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into_dynamic","try_into_inner","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_mismatch","variable_count","verify_empty","vtable_index","with_function","with_native_function","0","0","0","0","0","0","0","0","expected","kind","message","message","name","received","received","0","0","0","0","0","action","arg_count","arg_count","arg_count","comparison","condition","destination","destination","destination","destination","destination","destination","destination","false_jump_to","intrinsic","left","left","left","left","left","name","right","right","right","right","right","target","value","variable_index","vtable_index","0","0","0","0","0","0","0","0","0","0"],"q":["budlang","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budlang::Error","","","budlang::astbudlang::ast::BinOpKind","budlang::ast::CompilationError","","budlang::ast::Declaration","","budlang::ast::LoopParameters","","budlang::irbudlang::ir::CompareAction","","budlang::ir::Destination","budlang::ir::Instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budlang::ir::Literal","","","","budlang::ir::LiteralOrSource","","","budlang::ir::ScopeSymbol","","","budlang::ir::ValueSource","","budlang::map","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budlang::map::Entry","","budlang::parser","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budlang::parser::ParseError","","","","","","","budlang::symbol","","","","","","","","","","","","","","","","","","","","","","","","budlang::vmbudlang::vm::CompareAction","","budlang::vm::Destination","budlang::vm::FaultKind","","","","","","","","","","","","budlang::vm::FaultOrPause","","budlang::vm::Instruction","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","budlang::vm::Value","","","","budlang::vm::ValueKind","budlang::vm::ValueOrSource","","","budlang::vm::ValueSource",""],"d":["An error occurred while compiling <code>CodeUnit</code>.","All errors that can be encountered executing Bud code.","A fault occurred while running the virtual machine.","An error occurred while parsing the source code.","The abstract syntax tree Bud uses.","","","","","","Asserts that this error does not contain a paused …","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","Returns the source range for this error, if available.","A <code>HashMap</code> implementation that provides a defined iteration …","The interface for parsing Bud code.","","An “interned” string-like type used for identifiers in …","","","","","","The Bud virtual machine.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The value is in an argument at the provided 0-based index.","The value is in an argument at the provided 0-based index.","","","A boolean literal.","","","","","","","An action to take during an <code>Instruction::Compare</code>.","","A destination for a value.","","","","","","","","A signed 64-bit integer literal value.","If the comparison is false, jump to the 0-based …","","","","A literal value.","","","","","","","","","","A real number literal value (64-bit floating point).","","Store the value in the return register.","","","","Push the value to the stack.","Store the boolean result in the destination indicated.","A string literal.","","","","","The value is in a variable specified.","The value is in a variable specified.","Store the value in the 0-based variable index provided.","","","A literal that represents <code>Value::Void</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Defines a function with the provided name.","","","","","Runs all code in this unit in the passed context.","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","Returns the vtable index of a function with the provided …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","A <code>std::collections::HashMap</code> alternative that provides some …","A possible entry for a key in a <code>BudMap</code>.","A <code>BudMap</code> iterator that produces borrowed key-value pairs.","There is an entry for this key that contains a value.","An occupied entry for a key in a <code>BudMap</code>.","There is not currently an entry for this key.","An entry for a key that is is not currently part of a …","","","","","","","","","","","","","","Looks up an entry for <code>key</code>. If one is found, <code>Entry::Occupied</code>…","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns a value for a given key.","Returns a value for a given 0-based index.","Inserts <code>value</code> into the map for this entry’s key.","Inserts the key-value pair into the map. If an existing …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","Returns true if no entries are contained in this map.","Returns an interator for this map.","Returns the key of this entry.","Returns the number of entries contained in this map.","","Removes the entry from the containing map, returning the …","Removes a key from the map. If the key was found, the …","Replaces the contained value, returning the existing value.","","","","","","","","","","","","","","","","","Returns the value of this entry.","Returns an empty map with enough room for <code>minimum_capacity</code> …","Returns an empty map with enough room for <code>minimum_capacity</code> …","Returns an empty map whose keys are hashed using …","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","A type that can be converted into <code>Option&lt;Symbol&gt;</code>.","A String-like type that ensures only one instance of each …","Returns this symbol’s underlying representation.","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","Returns the value as a symbol, if possible.","","","","","","","Adds <code>left</code> and <code>right</code> and places the result in <code>destination</code>.","The value is in an argument at the provided 0-based index.","The value is in an argument at the provided 0-based index.","An argument that was expected to a function was not passed.","A boolean representing true or false.","A boolean representing true or false.","A Bud virtual machine instance.","An <code>Environment</code> that allows executing an amount of …","Calls a function.","Calls a function by name on a value.","Calls an intrinsic runtime function.","A block of code that can be executed on the virtual …","Displays a <code>CodeBlock</code> with optional indentation.","Compares <code>left</code> and <code>right</code> using <code>comparison</code> to evaluate a …","An action to take during an <code>Instruction::Compare</code>.","A method for comparing <code>Value</code>s.","The virtual machine should continue executing.","A destination for a value.","Divides <code>left</code> by <code>right</code> and places the result in <code>destination</code>.","A Rust value that has been wrapped for use in the virtual …","A type exposed from Rust.","A dynamically exposed Rust type.","An error arose from dynamic types.","A <code>Fault</code> that arose from a <code>Dynamic</code> value.","A type that can be used in the virtual machine using …","Customizes the behavior of a virtual machine instance.","Pushes true if left and right are equal. Otherwise, pushes …","The virtual machine behavior returned from …","An unexpected event occurred while executing the virtual …","A fault occurred while processing instructions.","An unexpected event within the virtual machine.","A reason for a virtual machine <code>Fault</code>.","A stack frame entry of a <code>Fault</code>.","A type that can be constructed from popping from the …","A virtual machine function.","Pushes true if left is greater than right. Otherwise, …","Pushes true if left is greater than or equal to right. …","A wrapper for <code>std::collections::HashMap&lt;Value,Value&gt;</code> that …","Checks <code>condition.is_truthy()</code>, jumping to the target …","A virtual machine instruction.","A signed 64-bit integer value.","A signed 64-bit integer value.","A runtime intrinsic function.","An invalid argument index was used.","An invalid value type was encountered.","An invalid variable index was used.","An invalid vtable index was used.","If the comparison is false, jump to the 0-based …","Jumps to the instruction number within the current …","Pushes true if left is less than right. Otherwise, pushes …","Pushes true if left is less than or equal to right. …","A List type for Bud, which wraps a <code>VecDeque&lt;Value&gt;</code>.","The list (array) type for this environment.","Loads a <code>value</code> into a variable.","The map type for this environment.","Left <code>left</code> by <code>right</code> and places the result in <code>destination</code>.","A native function for Bud.","Creates a new List with the given arguments.","Creates a new Map with the given arguments.","Pushes true if left and right are not equal. Otherwise, …","The virtual machine should pause before the next …","Execution was paused by the <code>Environment</code> as a result of …","A paused code execution.","Pops a value from the stack and drops the value.","An iterator over a sequence of values being removed from …","Pushes a value to the stack.","A real number value (64-bit floating point).","A real number value (64-bit floating point).","Returns from the current stack frame.","Store the value in the return register.","A stack of <code>Value</code>s.","Push the value to the stack.","An attempt to push a value to the stack was made after the …","An attempt to pop a value off of the stack was made when …","Store the boolean result in the destination indicated.","The string type for this environment.","A <code>Display</code> implementor that converts a string value to its …","Subtracts <code>right</code> from <code>left</code> and places the result in …","Too many arguments were passed to a function.","A value type was unexpected in the given context.","A call was made to a function that does not exist.","A virtual machine value.","A value.","A value that does not support hashing was used as a key in …","All primitive <code>Value</code> kinds.","A value or a location of a value","A value was encountered that was out of range of valid …","The source of a value.","Store the value in the 0-based variable index provided.","The value is in a variable at the provided 0-based index.","The value is in a variable at the provided 0-based index.","A value representing the lack of a value.","A value representing the lack of a value.","Adds an additional budget. This value will saturate <code>usize</code> …","The number of arguments this function expects.","Returns a reference to the contained value, if it was one …","If this value is a <code>Value::Real</code>, this function returns the …","If this value is a <code>Value::Integer</code>, this function returns …","Returns this kind as a string.","Returns the current balance of the budget.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls a function by <code>name</code> with <code>args</code>.","Calls a function by <code>name</code> with <code>args</code>.","","Invokes <code>DynamicValue::call</code> with the given parameters.","","Runs a set of instructions.","Attempts to compute the result adding self and other.","Attempts to compute the result adding self and other.","Returns the result of <code>DynamicValue::checked_add()</code> for the …","Attempts to compute the result dividing self and other.","Attempts to compute the result dividing self and other.","Returns the result of <code>DynamicValue::checked_div()</code> for the …","Attempts to compute the result multiplying self and other.","Attempts to compute the result multiplying self and other.","Returns the result of <code>DynamicValue::checked_mul()</code> for the …","Attempts to compute the result subtracting self and other.","Attempts to compute the result subtracting self and other.","Returns the result of <code>DynamicValue::checked_sub()</code> for the …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The instructions that make up the function body.","","","","","","Returns a new instance with the provided environment.","","Defines a native function with the provided name.","","Returns a <code>Display</code> implementor that indents each printed …","Returns a reference to the original error, if <code>T</code> is the …","","Returns a new value containing the Rust value provided.","Returns a <code>FaultKind::Dynamic</code>.","Returns a default instance of Bud with no custom …","Returns a reference to the environment for this instance.","Returns a reference to the <code>Environment</code> from the virtual …","Returns a mutable refernce to the environment for this …","Returns a mutable reference to the <code>Environment</code> from the …","","","","","","","","","","","","","","","","","","","","","","Evaluates <code>source</code> interactively and returns the provided …","Pushes multiple arguments to the stack.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns an instance constructing from the stack.","","","","Returns the value associated with <code>key</code>, if present.","Returns the value contained at <code>index</code>, or <code>None</code> if <code>index</code> is …","Grows the stack by <code>additional_voids</code>, inserting <code>Value::Void</code> …","Hashes the contents of this value. Returns true if this …","Hashes the contents of this value. Returns true if this …","Returns the result of <code>DynamicValue::hash()</code> for the wrapped …","","","Returns true if value contained supports hashing.","","","Returns a reference to the contained value, if the …","Inserts a key-value pair into the map.","The index of the instruction that was executing when this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contained value, if it was one originally …","Extracts the contained collection type.","Returns the contained value if <code>T</code> is the contained type. If …","Extracts the contained collection type.","","An invalid type was encountered.","Invoke this function with <code>args</code>.","Returns true if this map contains no items.","Returns true if this list contains no values.","Returns true if this stack has no values.","Returns the inverse of <code>DynamicValue::is_truthy()</code> for the …","Returns the inverse of <code>is_truthy()</code>","Returns true if the value contained is truthy. See …","","Returns the result of <code>DynamicValue::is_truthy()</code> for the …","","Returns true if the value is considered truthy.","Returns a unique string identifying this type. This …","","Returns the result of <code>DynamicValue::kind()</code> for the wrapped …","","Returns the kind of the contained value.","The kind of fault this is.","Returns the number of items contained.","Returns the number of values contained in the list.","Returns the number of <code>Value</code>s contained in this stack.","","The name of the function.","Returns a new, empty hash map.","Returns a new instance for the provided string.","Returns a new instance, wrapping <code>value</code>.","Returns a new instance with the provided environment.","Returns a new instance with the provided initial budget.","Returns a new stack with enough reserved space to store …","Returns a new instance containing the provided error.","","Returns the next value or returns a …","Returns the relative ordering of <code>self</code> and <code>other</code>, if a …","Returns the relative ordering of <code>self</code> and <code>other</code>, if a …","Returns the result of <code>DynamicValue::partial_cmp()</code> for the …","","","Returns true if self and other are considered equal. …","Returns true if self and other are considered equal. …","","Returns the result of <code>DynamicValue::partial_eq()</code> for the …","","Pops a <code>Value</code> from the stack.","Removes the last value in the list.","Removes the first value in the list.","Pops <code>count</code> elements from the top of the stack.","","","Pushes <code>value</code> to the stack.","Pushes <code>value</code> to the back of the list.","Pushes <code>value</code> to the front of the list.","Returns the number of <code>Value</code>s that can be pushed to this …","Removes the value associated with <code>key</code>, if present.","Removes the value contained at <code>index</code>, or <code>None</code> if <code>index</code> is …","","Resumes executing the virtual machine.","Runs a set of instructions.","Compiles <code>source</code> and executes it in this context. Any …","","The stack trace of the virtual machine when the fault was …","Called once before each instruction is executed.","","","","","","","","","","","","","","","","","","","","","","Returns this value as represented in source, if possible.","Returns this value as represented in source, if possible.","","Returns the result of <code>DynamicValue::to_source()</code> for the …","","","","","","","","","","","","","","","","","Returns a reference to the top <code>Value</code> on the stack, or …","Returns a reference to the top <code>Value</code> on the stack, or …","Truncates the stack to <code>new_length</code>. If the <code>new_length</code> is …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Attempts to compute a hash over this value. Returns true …","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the contained value if <code>T</code> matches the contained …","Attempts to unwrap the value. If there is more than one …","Returns the original error if <code>T</code> is the same type that was …","","","","","","Returns the <code>TypeId</code> of the wrapped type.","","","","","","","","","","","","","","","","","","","","","","","An type mismatch occurred.","The number of variables this function requests space for.","Checks if all values have been iterated. If not, …","The vtable index of the function being executed. If None, …","Registers a function with the provided name and returns …","Registers a function with the provided name and returns …","","","","","","","","","The kind expected in this context.","The kind of the value the function was called on.","The error message explaining the type mismatch.","The error message explaining the type mismatch.","The name of the function being called.","The value that caused an error.","The value that caused an error.","","","","","","The action to take with the result of the comparison.","The number of arguments on the stack that should be used as","The number of arguments on the stack that should be used as","The number of arguments on the stack that should be used as","The comparison to perform.","The source of the condition.","The destination for the result to be stored in.","The destination for the result to be stored in.","The destination for the result to be stored in.","The destination for the result to be stored in.","The destination for the result of the call.","The destination for the result of the call.","The destination for the result of the call.","The 0-based index of the instruction to jump to. This …","The runtime intrinsic to call.","The left hand side of the operation.","The left hand side of the operation.","The left hand side of the operation.","The left hand side of the operation.","The left hand side of the operation.","The name of the function to call.","The right hand side of the operation.","The right hand side of the operation.","The right hand side of the operation.","The right hand side of the operation.","The right hand side of the operation.","The target of the function call. If None, the value on the …","The value or source of the value to store.","The index of the variable to store the value in.","The vtable index within the current module of the function …","","","","","","","","","",""],"i":[1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,1,0,0,1,0,1,1,1,1,1,0,105,106,107,20,0,0,0,0,0,0,0,20,0,0,0,20,0,0,38,0,9,0,0,0,0,0,38,20,0,20,0,9,9,37,37,18,18,36,18,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,18,23,18,19,25,26,27,21,28,9,19,25,26,27,21,28,9,18,30,18,18,30,9,18,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,9,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,38,38,39,9,30,23,24,18,18,18,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,26,18,18,18,25,39,36,21,28,32,18,30,39,24,36,9,18,24,18,18,18,19,25,26,27,21,28,9,9,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,23,19,32,33,34,20,24,35,25,26,27,36,37,21,28,18,30,38,39,9,26,21,27,30,32,108,109,110,111,112,113,114,115,52,55,56,64,65,53,52,52,52,0,0,52,0,0,0,52,116,0,64,65,52,0,53,57,52,0,52,0,56,0,52,0,0,0,52,52,52,53,52,48,0,0,0,48,57,53,52,0,0,0,55,56,48,64,65,53,58,41,58,115,49,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,115,49,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,49,63,50,51,52,53,54,55,56,48,57,50,51,52,53,54,55,56,48,57,62,58,58,49,63,41,116,116,49,49,49,31,41,50,50,51,51,52,52,53,53,54,55,55,56,56,48,48,57,57,63,62,62,64,65,58,31,115,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,51,31,53,56,115,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,54,41,49,49,57,62,41,41,41,63,116,31,58,63,58,58,31,41,41,41,41,116,41,41,50,51,52,53,54,55,56,48,57,50,51,52,53,55,56,48,57,62,115,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,115,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,115,49,50,51,52,53,54,55,56,48,57,41,63,62,64,65,58,31,54,41,62,31,117,118,119,120,121,122,123,124,125,126,127,124,128,129,130,131,132,125,126,127,128,125,126,129,130,131,132,124,127,129,130,131,132,124,127,133,133,134,135,136,137,138,139,140,141,142,143,144,145,0,0,0,73,0,73,0,73,76,74,75,71,73,76,74,75,71,71,71,71,71,71,73,76,74,75,71,71,71,74,71,73,76,74,75,71,75,71,71,76,71,75,76,71,76,71,73,76,74,75,71,73,76,74,75,71,73,76,74,75,71,76,71,71,71,146,147,10,10,0,0,10,10,77,10,77,10,77,10,77,10,77,10,77,77,10,10,77,10,77,10,10,0,10,77,10,77,10,77,10,77,10,77,10,148,149,150,151,150,151,150,0,0,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,46,42,42,42,42,42,42,85,88,67,7,66,80,0,0,85,85,85,0,0,85,0,0,104,0,85,0,66,80,7,0,0,0,29,0,0,89,0,0,0,0,0,29,29,0,85,0,66,80,0,7,7,7,7,68,85,29,29,0,152,85,152,85,0,86,86,29,104,89,0,85,0,85,66,80,85,87,0,87,7,7,68,152,0,85,7,7,7,0,67,7,0,0,7,0,87,88,67,66,80,79,59,66,66,66,80,79,82,99,104,95,81,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,82,99,104,95,81,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,96,96,82,83,84,60,96,96,83,96,96,83,96,96,83,96,96,83,82,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,91,92,82,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,91,92,59,82,66,60,79,91,60,60,60,60,69,92,81,66,7,60,60,98,60,98,85,86,68,87,88,67,29,59,66,66,66,66,80,60,8,89,7,90,98,91,92,60,91,82,99,95,83,83,84,85,85,86,86,68,68,87,87,88,88,67,67,29,29,59,66,66,80,80,60,8,8,89,7,7,90,98,79,69,69,91,92,82,99,104,95,81,83,84,85,86,68,87,87,88,88,67,29,59,66,80,60,8,8,89,7,7,90,98,79,69,91,92,84,61,82,84,66,82,84,91,96,96,83,84,66,66,91,91,83,82,90,82,99,104,95,81,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,66,82,83,84,81,7,94,82,84,91,83,66,96,82,83,84,66,96,82,83,84,66,8,82,84,91,60,59,82,99,83,60,79,91,92,81,81,96,96,83,84,66,96,96,82,83,84,91,84,84,91,8,7,91,84,84,91,82,84,60,98,60,60,81,8,152,79,82,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,91,92,96,96,82,83,84,99,95,83,85,86,68,87,88,67,29,66,80,8,7,69,91,91,91,82,82,99,104,95,81,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,66,82,99,104,95,81,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,66,83,92,82,99,104,95,81,83,83,84,85,86,68,87,88,67,29,59,66,80,60,8,89,7,90,98,79,69,91,92,7,59,81,90,60,60,153,154,155,156,157,158,159,160,161,162,161,163,162,161,163,164,165,166,167,168,169,170,171,172,169,173,174,175,176,177,170,171,172,173,171,174,175,176,177,169,172,174,175,176,177,169,172,178,178,170,179,180,181,182,183,184,185,186,187,188],"f":[0,0,0,0,0,[[]],[[]],[1,1],[[]],[[[1,[2,2]],1],3],[1,1],[[[1,[4,4]],5],6],[[1,5],6],[7,1],[8,1],[[]],[9,1],[10,1],[[]],0,[1,[[13,[[12,[11]]]]]],0,0,[14],0,[[]],[[],15],[[],16],[[],16],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[18,19,19],19],[[18,20,19,19],19],0,[[18,3],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,21],19],[22,23],[[18,24],19],[19,19],[25,25],[26,26],[27,27],[21,21],[28,28],[9,9],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[18,29,19,19],19],[30,[[16,[31,9]]]],[[18,28],19],[[],18],[[],30],[[9,9],3],[[18,19],23],[[23,5],6],[[19,5],6],[[32,5],6],[[33,5],6],[[34,5],6],[[20,5],6],[[24,5],6],[[35,5],6],[[25,5],6],[[26,5],6],[[27,5],6],[[36,5],6],[[37,5],6],[[21,5],6],[[28,5],6],[[18,5],6],[[30,5],6],[[38,5],6],[[39,5],6],[[9,5],6],[[9,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[39,38],[[]],[30,38],[[]],[[]],[[[40,[19]],18],30],[[23,41],[[16,[9]]]],[[[43,[42]],44],24],[[18,[43,[42]]],19],[[18,32],19],[[18,45],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[18,[40,[19]]],19],[[18,36],19],[[18,[40,[26]]],19],0,[39,[[13,[42]]]],0,0,0,[[19,19],32],[[],18],[22,30],[[46,[40,[42]],23],39],[[19,[43,[42]],44],24],0,[14],[[18,47],19],[44,24],[[18,19],19],[[18,44],19],[[18,15],19],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,0,0,[[30,[43,[42]],[43,[38]]],30],[[32,19],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[41,[13,[42]],48],[[49,[41]]]],0,[[]],[49,41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[49,41],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,0,[50,50],[51,51],[52,52],[53,53],[54,54],[55,55],[56,56],[48,48],[57,57],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[58,[[16,[59,9]]]],[58,[[16,[11,9]]]],0,0,[[],41],[59,[[13,[11]]]],[[42,51]],[49],[49],[49],[[31,60],[[16,[61,[1,[61]]]]]],[41,62],[[50,5],6],[[50,5],6],[[51,5],6],[[51,5],6],[[52,5],6],[[52,5],6],[[53,5],6],[[53,5],6],[[54,5],6],[[55,5],6],[[55,5],6],[[56,5],6],[[56,5],6],[[48,5],6],[[48,5],6],[[57,5],6],[[57,5],6],[[63,5],6],[[62,5],6],[[62,5],6],[[64,5],6],[[65,5],6],[[58,5],6],[[31,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[51,11],0,[53,66],[56,67],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[41,50]],[49],[49],[57,68],[62,[[16,[69,9]]]],[[41,42,48],[[16,[9]]]],[[41,42],[[13,[65]]]],[[41,[13,[42]]],[[13,[63]]]],0,[[]],0,[58,[[13,[42]]]],0,0,[[46,[40,[42]],62],58],[[[40,[58]],[40,[31]],[13,[58]]],31],[41,50],[41,51],[[41,52]],[[41,42]],[42,[[13,[11]]]],[[41,56,48]],[[41,42],[[13,[65]]]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],0,[[41,42],51],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[[71,[70,70,70]]],[[71,[70,70,70]]]],[[]],[[],[[71,[72]]]],[71,73],[[[71,[4,4,4]],5],6],[[]],[[]],[[]],[[]],[[]],[71,13],[[71,11],13],[74],[71,13],[[]],[[]],[[]],[[]],[[]],[[]],[71,3],[71,75],[76],[71,11],[75,13],[76],[71,13],[76],[[]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],[[],17],[[],17],[[],17],[76],[11,[[71,[72]]]],[11,71],[[],71],0,0,0,0,0,0,0,0,[[]],[[]],[[]],[[]],[77,77],[10,10],[[]],[[]],[[77,77],3],[[10,10],3],[[77,5],6],[[77,5],6],[[10,5],6],[[10,5],6],[[]],[[]],[[]],[[]],[10,[[13,[[12,[11]]]]]],[78,[[16,[30,10]]]],[14],[[]],[[]],[[],15],[[],15],[[],16],[[],16],[[],16],[[],16],[[],17],[[],17],0,0,0,0,0,0,0,0,0,[42,78],[[]],[[]],[42,42],[[]],[42],[[42,78],3],[[42,42],3],[[42,78],3],[[42,5],6],[[42,5],6],[[]],[78,42],[42],[[]],[[],[[13,[42]]]],[42,[[13,[42]]]],[[]],[[],15],[[],16],[[],16],[[],17],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[79,11]],0,[66,13],[66,[[13,[47]]]],[66,[[13,[45]]]],[80,78],[79,11],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[42,81],[[16,[66,7]]]],[[42,81],[[16,[66,7]]]],[[82,42,81],[[16,[66,7]]]],[[83,42,81],[[16,[66,7]]]],[[84,42,81],[[16,[66,7]]]],[[60,42],[[16,[61,[1,[61]]]]]],[[66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[83,66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[83,66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[83,66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[66,3],[[16,[[13,[66]],7]]]],[[83,66,3],[[16,[[13,[66]],7]]]],[82,82],[83,83],[84,84],[85,85],[86,86],[68,68],[87,87],[88,88],[67,67],[29,29],[59,59],[66,66],[80,80],[[[60,[70]]],[[60,[70]]]],[8,8],[89,89],[7,7],[90,90],[91,91],[92,92],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[82,[72]]]],[[],66],[[],[[60,[93]]]],[[],79],[[],91],[[],60],[[60,59],[[13,[11]]]],[[60,[43,[42]],94],11],[[60,42,51]],[[69,78],95],[92,13],[81],[96,66],[[[0,[4,97]]],7],[[],60],[60],[98],[60],[98],[[85,85],3],[[86,86],3],[[68,68],3],[[87,87],3],[[88,88],3],[[67,67],3],[[29,29],3],[[59,59],3],[[66,47],3],[[66,45],3],[[66,3],3],[[66,66],3],[[80,80],3],[[[60,[2]],60],3],[[[8,[2,2]],8],3],[[[89,[2,2]],89],3],[[7,7],3],[[90,90],3],[[[98,[2,2]],98],3],[[91,91],3],[[92,92],3],[[60,78],[[16,[61,[1,[61]]]]]],[91,[[16,[11,7]]]],[[82,5],6],[[99,5],6],[[95,5],6],[[83,5],6],[[83,5],6],[[84,5],6],[[85,5],6],[[85,5],6],[[86,5],6],[[86,5],6],[[68,5],6],[[68,5],6],[[87,5],6],[[87,5],6],[[88,5],6],[[88,5],6],[[67,5],6],[[67,5],6],[[29,5],6],[[29,5],6],[[59,5],6],[[66,5],6],[[66,5],6],[[80,5],6],[[80,5],6],[[[60,[4]],5],6],[[[8,[4,4]],5],6],[[8,5],6],[[[89,[4,4]],5],6],[[7,5],6],[[7,5],6],[[90,5],6],[[[98,[4,4]],5],6],[[79,5],6],[[69,5],6],[[69,5],6],[[91,5],6],[[92,5],6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,87],[[]],[55,88],[[]],[[]],[[]],[[]],[[]],[[]],[7,8],[[]],[[]],[[]],[100,7],[[]],[[]],[[]],[[]],[[]],[[]],[44,84],[66,[[16,[7]]]],[66,[[16,[7]]]],[66,[[16,[7]]]],[66,[[16,[66,7]]]],[[82,66],[[13,[66]]]],[[84,11],[[13,[66]]]],[[91,11],[[16,[7]]]],[[],3],[[],3],[83,3],[84,3],[66],[66,3],[[91,11]],[[91,11]],[83,13],[[82,66,66],[[16,[[13,[66]],7]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[66,[[16,[[0,[96,70]],66]]]],[82,[[71,[66,66]]]],[83,[[16,[[0,[96,70]],83]]]],[84,[[101,[66]]]],[[]],[[[43,[15]],66],7],[81,[[16,[66,7]]]],[82,3],[84,3],[91,3],[83,3],[66,3],[[],3],[82,3],[83,3],[84,3],[66,3],[[],78],[82,78],[83,78],[84,78],[66,80],0,[82,11],[84,11],[91,11],[60],0,[[],[[82,[72]]]],[78,99],[96,83],[[11,11],60],[11,79],[[11,11],91],[[[0,[4,97]]],92],[81,13],[[81,78],[[16,[66,7]]]],[66,[[13,[102]]]],[66,[[13,[102]]]],[[83,66],[[13,[102]]]],[[84,66],[[13,[102]]]],[[66,66],[[13,[102]]]],[66,[[13,[3]]]],[66,[[13,[3]]]],[[82,66],[[13,[3]]]],[[83,66],[[13,[3]]]],[[84,66],[[13,[3]]]],[91,[[16,[66,7]]]],[84,[[13,[66]]]],[84,[[13,[66]]]],[[91,11],81],[14],[14],[[91,66],[[16,[7]]]],[[84,66]],[[84,66]],[91,11],[[82,66],[[13,[66]]]],[[84,11],[[13,[66]]]],[[60,42],[[13,[11]]]],[98,[[16,[8]]]],[[60,103,11],[[16,[61,[8,[61]]]]]],[[60,78],[[16,[61,[1,[61]]]]]],[81],0,[[],104],[79,104],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[13,[15]]]],[[],[[13,[15]]]],[82,[[13,[15]]]],[83,[[13,[15]]]],[84,[[13,[15]]]],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[[],15],[91,[[16,[66,7]]]],[91,[[16,[66,7]]]],[[91,11]],[[],16],[81,[[16,[[82,[72]]]]]],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[66,3],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[[],16],[66,[[16,[96,66]]]],[83,[[16,[96,83]]]],[92,[[16,[[0,[4,97]],92]]]],[[],17],[[],17],[[],17],[[],17],[[],17],[83,17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[],17],[[[43,[15]],80,66],7],0,[81,[[16,[7]]]],0,[[60,59],60],[[60,[43,[42]],94],60],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[4,"Error"],[8,"PartialEq"],[15,"bool"],[8,"Debug"],[3,"Formatter"],[6,"Result"],[4,"FaultKind"],[3,"Fault"],[4,"CompilationError"],[4,"ParseError"],[15,"usize"],[3,"Range"],[4,"Option"],[3,"Demand"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"SyntaxTreeBuilder"],[3,"NodeId"],[4,"BinOpKind"],[3,"Break"],[8,"FnOnce"],[3,"ExpressionTree"],[3,"Call"],[3,"Map"],[3,"Mapping"],[3,"List"],[3,"Continue"],[4,"Comparison"],[3,"CodeUnit"],[3,"UnlinkedCodeUnit"],[3,"If"],[3,"Block"],[3,"BinOp"],[3,"Assign"],[3,"Loop"],[4,"LoopParameters"],[4,"Declaration"],[3,"Function"],[3,"Vec"],[3,"CodeBlockBuilder"],[3,"Symbol"],[8,"Into"],[8,"IntoIterator"],[15,"i64"],[8,"OptionalSymbol"],[15,"f64"],[4,"Destination"],[3,"LoopScope"],[3,"Label"],[3,"Variable"],[4,"Instruction"],[4,"Literal"],[3,"Mapping"],[4,"ValueSource"],[4,"LiteralOrSource"],[4,"CompareAction"],[3,"Function"],[3,"Function"],[3,"Bud"],[8,"FromStack"],[3,"CodeBlock"],[3,"LoopInfo"],[4,"ScopeSymbolKind"],[4,"ScopeSymbol"],[4,"Value"],[4,"ValueOrSource"],[4,"CompareAction"],[3,"CodeBlock"],[8,"Clone"],[3,"BudMap"],[3,"RandomState"],[4,"Entry"],[3,"VacantEntry"],[3,"Iter"],[3,"OccupiedEntry"],[3,"Token"],[15,"str"],[3,"Budgeted"],[4,"ValueKind"],[3,"PoppedValues"],[3,"HashMap"],[3,"Dynamic"],[3,"List"],[4,"Instruction"],[4,"Intrinsic"],[4,"Destination"],[4,"ValueSource"],[4,"FaultOrPause"],[3,"FaultStackFrame"],[3,"Stack"],[3,"DynamicFault"],[8,"Default"],[8,"NativeFunction"],[3,"CodeBlockDisplay"],[8,"DynamicValue"],[8,"Display"],[3,"PausedExecution"],[3,"StringLiteralDisplay"],[3,"Error"],[3,"VecDeque"],[4,"Ordering"],[4,"Cow"],[4,"ExecutionBehavior"],[13,"Parse"],[13,"Compilation"],[13,"Fault"],[13,"Compare"],[13,"UndefinedFunction"],[13,"UndefinedIdentifier"],[13,"Function"],[13,"Module"],[13,"Until"],[13,"While"],[4,"DagNode"],[8,"Scope"],[13,"Store"],[13,"JumpIfFalse"],[13,"Variable"],[13,"JumpTo"],[13,"Label"],[13,"Push"],[13,"Return"],[13,"Compare"],[13,"Call"],[13,"CallIntrinsic"],[13,"CallInstance"],[13,"If"],[13,"Add"],[13,"Sub"],[13,"Multiply"],[13,"Divide"],[13,"Load"],[13,"Integer"],[13,"Real"],[13,"Boolean"],[13,"String"],[13,"Literal"],[13,"Argument"],[13,"Variable"],[13,"Argument"],[13,"Variable"],[13,"Function"],[13,"Argument"],[13,"Variable"],[13,"Occupied"],[13,"Vacant"],[13,"Unexpected"],[13,"UnexpectedEof"],[13,"MissingEnd"],[13,"ExpectedEndOfLine"],[8,"Environment"],[13,"Store"],[13,"JumpIfFalse"],[13,"Variable"],[13,"Dynamic"],[13,"ArgumentMissing"],[13,"TooManyArguments"],[13,"ValueCannotBeHashed"],[13,"ValueOutOfRange"],[13,"TypeMismatch"],[13,"UnknownFunction"],[13,"InvalidType"],[13,"Fault"],[13,"Pause"],[13,"JumpTo"],[13,"Push"],[13,"Return"],[13,"Compare"],[13,"Call"],[13,"CallIntrinsic"],[13,"CallInstance"],[13,"If"],[13,"Add"],[13,"Sub"],[13,"Multiply"],[13,"Divide"],[13,"Load"],[13,"Integer"],[13,"Real"],[13,"Boolean"],[13,"Dynamic"],[13,"Dynamic"],[13,"Value"],[13,"Argument"],[13,"Variable"],[13,"Argument"],[13,"Variable"]]},\
"xtask":{"doc":"","t":[4,11,11,11,11,5,11,11,11,11],"n":["Config","borrow","borrow_mut","from","into","main","paths","try_from","try_into","type_id"],"q":["xtask","","","","","","","","",""],"d":["","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","",""],"i":[0,6,6,6,6,0,6,6,6,6],"f":[0,[[]],[[]],[[]],[[]],[[],1],[[],[[3,[2]]]],[[],4],[[],4],[[],5]],"p":[[6,"Result"],[3,"String"],[3,"Vec"],[4,"Result"],[3,"TypeId"],[4,"Config"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
