var searchIndex = JSON.parse('{\
"budlang":{"doc":"A safe, fast, lightweight embeddable scripting language …","t":[13,4,13,13,0,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,12,12,12,13,13,13,3,4,3,3,13,3,3,13,13,4,4,13,13,3,3,13,13,3,13,4,13,3,13,13,13,3,8,13,13,13,13,13,13,4,13,13,3,13,3,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,11,11,11,11,11,11,5,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,3,3,13,13,4,13,13,8,13,4,3,4,3,8,3,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,13,13,4,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Compilation","Error","Fault","Parse","ast","borrow","borrow_mut","fmt","fmt","from","from","from","from","into","parser","symbol","to_string","try_from","try_into","type_id","vm","0","0","0","Add","Add","Argument","BinOp","BinOpKind","Block","Call","Call","CodeBlockBuilder","CodeUnit","Compare","Compare","CompilationError","Declaration","Divide","Divide","ExpressionTree","Function","Function","Function","If","If","IntermediateOp","JumpTo","Label","Module","Multiply","Multiply","NodeId","OptionalSymbol","Pop","PopToVariable","Push","PushCopy","PushVariable","Return","ScopeSymbol","Sub","Sub","SyntaxTreeBuilder","UndefinedFunction","UnlinkedCodeUnit","Variable","add_symbol","binop_node","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compare_node","compile","compile_into","default","default","default","execute_in","finish","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tree","generate_code","global","identifier","if_node","integer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_symbol","label","name","new","new","new","new","new_label","on","push","push_from_symbol","recurse","return_node","statements","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","with","with_else","0","0","0","0","0","0","0","0","0","0","arg_count","false_jump_to","function","0","function","ParseError","Unexpected","borrow","borrow_mut","fmt","fmt","from","into","parse","to_string","try_from","try_into","type_id","char","offset","Symbol","borrow","borrow_mut","clone","clone_into","deref","eq","eq","eq","fmt","fmt","from","from","hash","into","into_symbol","to_owned","to_string","try_from","try_into","type_id","Add","Boolean","Bud","Budgeted","Call","Compare","Comparison","Continue","Divide","Environment","Equal","ExecutionBehavior","Fault","FaultKind","FaultStackFrame","FromStack","Function","GreaterThan","GreaterThanOrEqual","If","Instruction","Integer","InvalidArgumentIndex","InvalidVariableIndex","InvalidVtableIndex","JumpTo","LessThan","LessThanOrEqual","Multiply","NotEqual","Pause","Paused","PausedExecution","PopAndDrop","PopToVariable","Push","PushArg","PushVariable","Return","StackUnderflow","Sub","Value","Void","add_budget","arg_count","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","clone","clone","clone","clone_into","clone_into","clone_into","code","default","default","define_function","empty","environment","environment","environment_mut","environment_mut","eq","eq","eq","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from_stack","from_stack","instruction_index","into","into","into","into","into","into","into","into","into","into","into","is_truthy","kind","new","new","resolve_function_vtable_index","resume","run","run_source","stack","step","step","to_owned","to_owned","to_owned","to_string","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable_count","vtable_index","with_function","0","0","0","0","0","0","0","arg_count","false_jump_to","vtable_index","0","0"],"q":["budlang","","","","","","","","","","","","","","","","","","","","","budlang::Error","","","budlang::astbudlang::ast::BinOpKind","budlang::ast::CompilationError","budlang::ast::Declaration","","budlang::ast::IntermediateOp","","","","","","","","","budlang::ast::ScopeSymbol","","budlang::parser","","","","","","","","","","","","","budlang::parser::ParseError","","budlang::symbol","","","","","","","","","","","","","","","","","","","","","budlang::vmbudlang::vm::FaultKind","budlang::vm::Instruction","","","","","","","","","budlang::vm::Value",""],"d":["An error occurred while compiling <code>CodeUnit</code>.","All errors that can be encountered executing Bud code.","A fault occurred while running the virtual machine.","An error occurred while parsing the source code.","The abstract syntax tree Bud uses.","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The interface for parsing Bud code.","An “interned” string-like type used for identifiers in …","","","","","The Bud virtual machine.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs all code in this unit in the passed context.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A String-like type that ensures only one instance of each …","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Pops left and right, and pushes the result of <code>left + right</code>.","A boolean representing true or false.","A Bud virtual machine instance.","An <code>Environment</code> that allows executing an amount of …","Calls a function.","Pops left and right and pushes the boolean result of the …","A method for comparing <code>Value</code>s.","The virtual machine should continue executing.","Pops left and right, and pushes the result of <code>left / right</code>.","Customizes the behavior of a virtual machine instance.","Pushes true if left and right are equal. Otherwise, pushes …","The virtual machine behavior returned from …","An unexpected event occurred while executing the virtual …","An unexpected event within the virtual machine.","A stack frame entry of a <code>Fault</code>.","A type that can be constructed from popping from the …","A virtual machine function.","Pushes true if left is greater than right. Otherwise, …","Pushes true if left is greater than or equal to right. …","Pops <code>condition</code> and checks if <code>condition.is_truthy()</code>, …","A virtual machine instruction.","A signed 64-bit integer value.","An invalid argument index was used.","An invalid variable index was used.","An invalid vtable index was used.","Jumps to the instruction number within the current …","Pushes true if left is less than right. Otherwise, pushes …","Pushes true if left is less than or equal to right. …","Pops left and right, and pushes the result of <code>left * right</code>.","Pushes true if left and right are not equal. Otherwise, …","The virtual machine should pause before the next …","Execution was paused by the <code>Environment</code> as a result of …","A paused code execution.","Pops a value from the stack and drops the value.","Pops a value from the stack and stores it into the …","Pushes a <code>Value</code> to the stack.","Pushes an argument to the stack.","Pushes a variable to the stack.","Returns from the current stack frame.","An attempt to pop a value off of the stack was made when …","Pops left and right, and pushes the result of <code>left - right</code>.","A virtual machine value.","A value representing the lack of a value.","Adds an additional budget. This value will saturate <code>usize</code> …","The number of arguments this function expects.","Returns the current balance of the budget.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The instructions that make up the function body.","","","Defines a function with the provided name.","Returns a default instance of Bud with no custom …","Returns a reference to the environment for this instance.","Returns a reference to the <code>Environment</code> from the virtual …","Returns a mutable refernce to the environment for this …","Returns a mutable reference to the <code>Environment</code> from the …","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an instance constructing from the stack.","","The index of the instruction that was executing when this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns true if the value is considered truthy.","The kind of fault this is.","Returns a new instance with the provided environment.","Returns a new instance with the provided initial budget.","Returns the vtable index of a function with the provided …","Resumes executing the virtual machine.","Runs a set of instructions.","Compiles <code>source</code> and executes it in this context. Any …","The stack trace of the virtual machine when the fault was …","Called once before each instruction is executed.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","The number of variables this function requests space for.","The vtable index of the function being executed. If None, …","Registers a function with the provided name and returns …","","","","","","","","The number of arguments on the stack that should be used as","The 0-based index of the instruction to jump to. This …","The vtable index within the current module of the function …","",""],"i":[2,0,2,2,0,2,2,2,2,2,2,2,2,2,0,0,2,2,2,2,0,52,53,54,16,23,14,0,0,0,0,23,0,0,16,23,0,0,16,23,0,0,14,36,0,23,0,23,0,36,16,23,0,0,23,23,23,23,23,23,0,16,23,0,7,0,0,11,15,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,19,15,17,21,22,23,17,21,22,23,15,25,27,15,11,25,26,15,11,19,17,33,34,35,16,20,15,14,25,26,36,27,21,22,23,7,7,19,17,33,34,35,16,20,15,11,14,25,26,36,36,36,27,21,22,23,7,25,19,20,15,15,15,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,40,11,27,33,15,25,27,11,20,11,11,20,15,15,17,21,22,23,7,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,19,17,33,34,35,16,20,15,11,14,25,26,36,27,21,22,23,7,25,33,55,56,57,58,59,60,61,62,63,64,65,66,65,67,68,0,5,5,5,5,5,5,5,0,5,5,5,5,69,69,0,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,31,44,0,0,31,31,0,51,31,0,24,0,0,0,0,0,0,24,24,31,0,44,48,48,48,31,24,24,31,24,51,48,0,31,31,31,31,31,31,48,31,0,44,43,46,43,51,31,24,46,44,28,6,48,49,47,43,51,31,24,46,44,28,6,48,49,47,43,31,24,44,31,24,44,46,28,43,28,28,28,47,28,47,44,44,44,31,24,46,44,28,6,6,48,48,49,47,43,51,31,24,46,44,28,6,6,48,49,47,43,30,44,49,51,31,24,46,44,28,6,48,49,47,43,44,6,28,43,28,47,28,28,6,70,43,31,24,44,6,48,51,31,24,46,44,28,6,48,49,47,43,51,31,24,46,44,28,6,48,49,47,43,51,31,24,46,44,28,6,48,49,47,43,46,49,28,71,72,73,74,75,76,77,78,79,78,80,81],"f":[0,0,0,0,0,[[]],[[]],[[[2,[1,1]],3],4],[[2,3],4],[5,2],[6,2],[7,2],[[]],[[]],0,0,[[],8],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[11,[13,[12]],14]],[[15,16,17,17],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[18,19],[[15,20],17],[17,17],[21,21],[22,22],[23,23],[[]],[[]],[[]],[[]],[[15,24,17,17],17],[25,26],[[27,28],[[9,[29,7]]]],[[],15],[[],11],[[],25],[[26,28],[[9,[30,[2,[30]]]]]],[[15,17],19],[[11,28],[[9,[[32,[31]],7]]]],[[19,3],4],[[17,3],4],[[33,3],4],[[34,3],4],[[35,3],4],[[16,3],4],[[20,3],4],[[15,3],4],[[14,3],4],[[25,3],4],[[26,3],4],[[36,3],4],[[27,3],4],[[21,3],4],[[22,3],4],[[23,3],4],[[7,3],4],[[7,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[25,36],[27,36],[[]],[[]],[[]],[[]],[[]],[[[32,[17]],15],25],[[19,11]],[[[13,[12]],37],20],[[15,[13,[12]]],17],[[15,33],17],[[15,38],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[39,[12]]]],[[11,21]],[27,[[39,[12]]]],[[17,17],33],[[],15],[18,25],[[40,[32,[12]],19],27],[11,21],[[17,[13,[12]],37],20],[[11,23]],[[11,12]],[37,20],[[15,17],17],[[15,37],17],[[]],[[]],[[]],[[]],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[25,[13,[12]],[13,[36]]],25],[[33,17],33],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[5,3],4],[[5,3],4],[[]],[[]],[41,[[9,[25,5]]]],[[],8],[[],9],[[],9],[[],10],0,0,0,[[]],[[]],[12,12],[[]],[12],[[12,41],42],[[12,41],42],[[12,12],42],[[12,3],4],[[12,3],4],[[]],[41,12],[12],[[]],[12,[[39,[12]]]],[[]],[[],8],[[],9],[[],9],[[],10],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[43,29]],0,[43,29],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[31,31],[24,24],[44,44],[[]],[[]],[[]],0,[[],[[28,[45]]]],[[],43],[[28,[13,[12]],46],29],[[],28],[28],[47],[28],[47],[[44,44],42],[[44,42],42],[[44,38],42],[[31,3],4],[[24,3],4],[[46,3],4],[[44,3],4],[[[28,[1]],3],4],[[[6,[1,1]],3],4],[[6,3],4],[[[48,[1,1]],3],4],[[48,3],4],[[49,3],4],[[[47,[1,1]],3],4],[[43,3],4],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[48,6],[[]],[[]],[[]],[[]],[28,[[9,[6]]]],[28,[[9,[44,[6,[44]]]]]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[44,42],0,[[],28],[29,43],[[28,12],[[39,[29]]]],[47,[[9,[6]]]],[[28,50],[[9,[30,[6,[30]]]]]],[[28,41],[[9,[30,[2,[30]]]]]],0,[[],51],[43,51],[[]],[[]],[[]],[[],8],[[],8],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],0,0,[[28,[13,[12]],46],28],0,0,0,0,0,0,0,0,0,0,0,0],"p":[[8,"Debug"],[4,"Error"],[3,"Formatter"],[6,"Result"],[4,"ParseError"],[3,"Fault"],[4,"CompilationError"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"CodeBlockBuilder"],[3,"Symbol"],[8,"Into"],[4,"ScopeSymbol"],[3,"SyntaxTreeBuilder"],[4,"BinOpKind"],[3,"NodeId"],[8,"FnOnce"],[3,"ExpressionTree"],[3,"Call"],[3,"Label"],[3,"Variable"],[4,"IntermediateOp"],[4,"Comparison"],[3,"CodeUnit"],[3,"UnlinkedCodeUnit"],[3,"Function"],[3,"Bud"],[15,"usize"],[8,"FromStack"],[4,"Instruction"],[3,"Vec"],[3,"If"],[3,"Block"],[3,"BinOp"],[4,"Declaration"],[8,"IntoIterator"],[15,"i64"],[4,"Option"],[8,"OptionalSymbol"],[15,"str"],[15,"bool"],[3,"Budgeted"],[4,"Value"],[8,"Default"],[3,"Function"],[3,"PausedExecution"],[4,"FaultKind"],[3,"FaultStackFrame"],[4,"Cow"],[4,"ExecutionBehavior"],[13,"Parse"],[13,"Compilation"],[13,"Fault"],[13,"Compare"],[13,"UndefinedFunction"],[13,"Function"],[13,"Module"],[13,"JumpTo"],[13,"Compare"],[13,"Push"],[13,"PushVariable"],[13,"PushCopy"],[13,"PopToVariable"],[13,"Call"],[13,"If"],[13,"Argument"],[13,"Function"],[13,"Unexpected"],[8,"Environment"],[13,"Paused"],[13,"JumpTo"],[13,"Compare"],[13,"Push"],[13,"PushVariable"],[13,"PushArg"],[13,"PopToVariable"],[13,"Call"],[13,"If"],[13,"Integer"],[13,"Boolean"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
