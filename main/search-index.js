var searchIndex = JSON.parse('{\
"budlang":{"doc":"A safe, fast, lightweight embeddable scripting language …","t":[13,4,13,13,0,11,11,11,11,11,11,11,11,11,11,0,0,11,11,11,11,0,12,12,12,13,13,13,3,3,4,3,3,13,13,3,3,13,13,4,13,4,13,13,3,3,13,13,3,13,4,13,3,13,13,13,3,8,13,13,13,13,4,13,13,3,13,3,3,13,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,4,13,11,11,11,11,11,11,5,11,11,11,11,12,12,3,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,13,13,13,13,3,3,13,13,13,4,13,13,13,3,13,13,13,3,8,8,13,4,3,13,4,4,3,8,3,13,13,13,4,13,13,13,13,13,13,13,13,13,13,13,13,13,3,13,13,13,13,13,13,3,13,13,13,13,13,4,4,4,13,13,13,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,11,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,10,11,10,11,12,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,10,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,12,12,11,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12],"n":["Compilation","Error","Fault","Parse","ast","borrow","borrow_mut","fmt","fmt","from","from","from","from","from","into","parser","symbol","to_string","try_from","try_into","type_id","vm","0","0","0","Add","Add","Argument","Assign","BinOp","BinOpKind","Block","Call","Call","CallInstance","CodeBlockBuilder","CodeUnit","Compare","Compare","CompilationError","CopyToVariable","Declaration","Divide","Divide","ExpressionTree","Function","Function","Function","If","If","IntermediateOp","JumpTo","Label","Module","Multiply","Multiply","NodeId","OptionalSymbol","PopAndDrop","Push","PushCopy","Return","ScopeSymbol","Sub","Sub","SyntaxTreeBuilder","UndefinedFunction","UnlinkedCodeUnit","Variable","Variable","add_symbol","assign_node","binop_node","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","build","call","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","compare_node","compile","compile_into","default","default","default","execute_in","finish","finish","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_tree","generate_code","global","identifier","if_node","integer","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_symbol","label","name","new","new","new","new","new_label","on","push","push_from_symbol","real","recurse","return_node","statements","to_owned","to_owned","to_owned","to_owned","to_string","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable_index_from_name","with","with_else","0","0","0","0","0","0","0","0","0","arg_count","arg_count","false_jump_to","function","name","target","0","0","function","ParseError","Unexpected","borrow","borrow_mut","fmt","fmt","from","into","parse","to_string","try_from","try_into","type_id","char","offset","Symbol","borrow","borrow_mut","clone","clone_into","deref","eq","eq","eq","fmt","fmt","from","from","hash","into","into_symbol","to_owned","to_string","try_from","try_into","type_id","Add","Argument","Boolean","Boolean","Bud","Budgeted","Call","CallInstance","Compare","Comparison","Continue","CopyToVariable","Divide","Dynamic","Dynamic","Dynamic","Dynamic","DynamicFault","DynamicValue","Environment","Equal","ExecutionBehavior","Fault","Fault","FaultKind","FaultOrPause","FaultStackFrame","FromStack","Function","GreaterThan","GreaterThanOrEqual","If","Instruction","Integer","Integer","InvalidArgumentIndex","InvalidType","InvalidVariableIndex","InvalidVtableIndex","JumpTo","LessThan","LessThanOrEqual","Multiply","NotEqual","Pause","Pause","PausedExecution","PopAndDrop","Push","PushCopy","Real","Real","Return","Stack","StackOverflow","StackUnderflow","Sub","TypeMismatch","UnknownFunction","Value","ValueKind","ValueSource","Variable","Void","Void","add_budget","arg_count","as_dynamic","as_dynamic_mut","as_str","balance","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","borrow_mut","call","call","clone","clone","clone","clone","clone","clone","clone_into","clone_into","clone_into","clone_into","clone_into","clone_into","code","default","default","default","default_for","define_function","downcast_ref","drain","dynamic","empty","environment","environment","environment_mut","environment_mut","eq","eq","eq","eq","eq","extend","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","fmt","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from","from_stack","from_stack","index","index_mut","instruction_index","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into","into_dynamic","is_empty","is_falsey","is_truthy","is_truthy","kind","kind","kind","len","ne","new","new","new","new","partial_cmp","partial_cmp","partial_eq","pop","pop_and_modify","push","remaining_capacity","resolve_function_vtable_index","resume","run","run_source","stack","stack","step","step","to_owned","to_owned","to_owned","to_owned","to_owned","to_owned","to_string","to_string","to_string","to_string","top","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_from","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_into","try_unwrap","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","type_id","variable_count","vtable_index","with_function","0","expected","kind","message","message","name","received","received","0","0","0","0","0","0","0","arg_count","arg_count","false_jump_to","name","target","vtable_index","0","0","0","0","0","0","0"],"q":["budlang","","","","","","","","","","","","","","","","","","","","","","budlang::Error","","","budlang::astbudlang::ast::BinOpKind","budlang::ast::CompilationError","budlang::ast::Declaration","","budlang::ast::IntermediateOp","","","","","","","","","","","budlang::ast::ScopeSymbol","","","budlang::parser","","","","","","","","","","","","","budlang::parser::ParseError","","budlang::symbol","","","","","","","","","","","","","","","","","","","","","budlang::vmbudlang::vm::FaultKind","","","","","","","","budlang::vm::FaultOrPause","","budlang::vm::Instruction","","","","","","","","","","","budlang::vm::Value","","","","budlang::vm::ValueKind","budlang::vm::ValueSource",""],"d":["An error occurred while compiling <code>CodeUnit</code>.","All errors that can be encountered executing Bud code.","A fault occurred while running the virtual machine.","An error occurred while parsing the source code.","The abstract syntax tree Bud uses.","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","The interface for parsing Bud code.","An “interned” string-like type used for identifiers in …","","","","","The Bud virtual machine.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Runs all code in this unit in the passed context.","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","","","","","","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Calls <code>U::from(self)</code>.","","","","","","","","A String-like type that ensures only one instance of each …","","","","","","","","","","","Returns the argument unchanged.","","","Calls <code>U::from(self)</code>.","","","","","","","Pops left and right, and pushes the result of <code>left + right</code>.","The value is in an argument at the provided 0-based index.","A boolean representing true or false.","A boolean representing true or false.","A Bud virtual machine instance.","An <code>Environment</code> that allows executing an amount of …","Calls a function.","Calls a function by name on a value.","Pops left and right and pushes the boolean result of the …","A method for comparing <code>Value</code>s.","The virtual machine should continue executing.","Copies the top value from the stack  into the variable …","Pops left and right, and pushes the result of <code>left / right</code>.","A Rust value that has been wrapped for use in the virtual …","A type exposed from Rust.","A dynamically exposed Rust type.","An error arose from dynamic types.","A <code>Fault</code> that arose from a <code>Dynamic</code> value.","A type that can be used in the virtual machine using …","Customizes the behavior of a virtual machine instance.","Pushes true if left and right are equal. Otherwise, pushes …","The virtual machine behavior returned from …","An unexpected event occurred while executing the virtual …","A fault occurred while processing instructions.","An unexpected event within the virtual machine.","A reason for a virtual machine <code>Fault</code>.","A stack frame entry of a <code>Fault</code>.","A type that can be constructed from popping from the …","A virtual machine function.","Pushes true if left is greater than right. Otherwise, …","Pushes true if left is greater than or equal to right. …","Pops <code>condition</code> and checks if <code>condition.is_truthy()</code>, …","A virtual machine instruction.","A signed 64-bit integer value.","A signed 64-bit integer value.","An invalid argument index was used.","An invalid value type was encountered.","An invalid variable index was used.","An invalid vtable index was used.","Jumps to the instruction number within the current …","Pushes true if left is less than right. Otherwise, pushes …","Pushes true if left is less than or equal to right. …","Pops left and right, and pushes the result of <code>left * right</code>.","Pushes true if left and right are not equal. Otherwise, …","The virtual machine should pause before the next …","Execution was paused by the <code>Environment</code> as a result of …","A paused code execution.","Pops a value from the stack and drops the value.","Pushes a <code>Value</code> to the stack.","Pushes a copy of a value to the stack. The value could be …","A real number value (64-bit floating point).","A real number value (64-bit floating point).","Returns from the current stack frame.","A stack of <code>Value</code>s.","An attempt to push a value to the stack was made after the …","An attempt to pop a value off of the stack was made when …","Pops left and right, and pushes the result of <code>left - right</code>.","A value type was unexpected in the given context.","A call was made to a function that does not exist.","A virtual machine value.","All primitive <code>Value</code> kinds.","The source of a value.","The value is in a variable at the provided 0-based index.","A value representing the lack of a value.","A value representing the lack of a value.","Adds an additional budget. This value will saturate <code>usize</code> …","The number of arguments this function expects.","Returns a reference to the contained value, if it was one …","Returns a mutable reference to the contained value, if it …","Returns this kind as a string.","Returns the current balance of the budget.","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Calls a function by <code>name</code> with <code>args</code>.","Runs a set of instructions.","","","","","","","","","","","","","The instructions that make up the function body.","","","","Returns a new instance with the provided environment.","Defines a function with the provided name.","Returns a reference to the original error, if <code>T</code> is the …","Pushes multiple arguments to the stack.","Returns a new value containing the Rust value provided.","Returns a default instance of Bud with no custom …","Returns a reference to the environment for this instance.","Returns a reference to the <code>Environment</code> from the virtual …","Returns a mutable refernce to the environment for this …","Returns a mutable reference to the <code>Environment</code> from the …","","","","","","Pushes multiple arguments to the stack.","","","","","","","","","","","","","","","","","","","","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns the argument unchanged.","Returns an instance constructing from the stack.","","","","The index of the instruction that was executing when this …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns the contained value, if it was one originally …","Returns true if this stack has no values.","Returns the inverse of <code>is_truthy()</code>","Returns true if the value contained is truthy. See …","Returns true if the value is considered truthy.","Returns a unique string identifying this type. This …","Returns the kind of the contained value.","The kind of fault this is.","Returns the number of <code>Value</code>s contained in this stack.","","Returns a new instance with the provided environment.","Returns a new instance with the provided initial budget.","Returns a new stack with enough reserved space to store …","Returns a new instance containing the provided error.","Returns the relative ordering of <code>self</code> and <code>other</code>, if a …","","Returns true if self and other are considered equal. …","Pops a <code>Value</code> from the stack.","Pops a <code>Value</code> from the stack and returns a mutable …","Pushes <code>value</code> to the stack.","Returns the number of <code>Value</code>s that can be pushed to this …","Returns the vtable index of a function with the provided …","Resumes executing the virtual machine.","Runs a set of instructions.","Compiles <code>source</code> and executes it in this context. Any …","Returns the stack of this virtual machine.","The stack trace of the virtual machine when the fault was …","Called once before each instruction is executed.","","","","","","","","","","","","Returns a reference to the top <code>Value</code> on the stack, or …","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","Returns the original error if <code>T</code> is the same type that was …","","","","","","","","","","","","","","","","","","The number of variables this function requests space for.","The vtable index of the function being executed. If None, …","Registers a function with the provided name and returns …","","The kind expected in this context.","The kind of the value the function was called on.","The error message explaining the type mismatch.","The error message explaining the type mismatch.","The name of the function being called.","The value that caused an error.","The value that caused an error.","","","","","","","","The number of arguments on the stack that should be used as","The number of arguments on the stack that should be used as","The 0-based index of the instruction to jump to. This …","The name of the function to call.","The target of the function call. If None, the value on the …","The vtable index within the current module of the function …","","","","","","",""],"i":[1,0,1,1,0,1,1,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,64,65,66,18,24,15,0,0,0,0,0,24,24,0,0,18,24,0,24,0,18,24,0,0,15,36,0,24,0,24,0,36,18,24,0,0,24,24,24,24,0,18,24,0,7,0,0,15,12,16,16,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,20,16,17,22,23,24,17,22,23,24,16,26,28,16,12,26,27,16,12,20,17,32,33,34,18,21,35,16,15,26,27,36,28,22,23,24,7,7,20,17,32,33,34,18,21,35,16,12,15,26,27,36,36,36,28,22,23,24,7,26,20,21,16,16,16,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,41,12,28,32,16,26,28,12,21,12,12,16,21,16,16,17,22,23,24,7,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,20,17,32,33,34,18,21,35,16,12,15,26,27,36,28,22,23,24,7,12,26,32,67,68,69,70,71,72,73,74,75,76,77,78,76,77,77,79,80,81,0,8,8,8,8,8,8,8,0,8,8,8,8,82,82,0,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,13,49,50,46,47,0,0,49,49,49,0,63,49,49,0,46,47,5,0,0,0,25,0,0,58,0,0,0,0,0,25,25,49,0,46,47,5,5,5,5,49,25,25,49,25,63,58,0,49,49,49,46,47,49,0,5,5,49,5,5,0,0,0,50,46,47,45,54,46,46,47,45,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,56,29,49,50,25,46,47,51,49,50,25,46,47,51,54,29,45,53,29,29,55,53,46,29,29,57,29,57,46,46,46,46,47,53,49,50,25,54,46,46,47,29,6,6,58,5,5,59,57,51,51,45,53,55,63,49,50,25,54,46,47,29,6,6,58,5,59,57,51,45,53,55,31,46,53,53,59,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,46,53,46,56,46,56,46,6,53,47,29,45,53,55,56,46,56,53,53,53,53,29,57,29,29,29,6,83,45,49,50,25,46,47,51,46,6,5,51,53,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,55,63,49,50,25,54,46,47,29,6,58,5,59,57,51,45,53,55,54,59,29,84,85,86,85,87,86,85,87,88,89,90,91,92,93,94,95,96,97,96,96,95,98,99,100,101,102,103,104],"f":[0,0,0,0,0,[[]],[[]],[[1,2],3],[[[1,[4,4]],2],3],[5,1],[6,1],[7,1],[8,1],[[]],[[]],0,0,[[],9],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[12,[14,[13]],15]],[[16,17,17],17],[[16,18,17,17],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[19,20],[[16,21],17],[17,17],[22,22],[23,23],[24,24],[[]],[[]],[[]],[[]],[[16,25,17,17],17],[26,27],[[28,29],[[10,[30,7]]]],[[],16],[[],12],[[],26],[[27,29],[[10,[31,[1,[31]]]]]],[[16,17],20],[[12,29],[[10,[7]]]],[[20,2],3],[[17,2],3],[[32,2],3],[[33,2],3],[[34,2],3],[[18,2],3],[[21,2],3],[[35,2],3],[[16,2],3],[[15,2],3],[[26,2],3],[[27,2],3],[[36,2],3],[[28,2],3],[[22,2],3],[[23,2],3],[[24,2],3],[[7,2],3],[[7,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[28,36],[26,36],[[]],[[]],[[]],[[]],[[]],[[[37,[17]],16],26],[[20,12]],[[[14,[13]],38],21],[[16,[14,[13]]],17],[[16,32],17],[[16,39],17],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[],[[40,[13]]]],[[12,22]],[28,[[40,[13]]]],[[17,17],32],[[],16],[19,26],[[41,[37,[13]],20],28],[12,22],[[17,[14,[13]],38],21],[[12,24]],[[12,13]],[[16,42],17],[38,21],[[16,17],17],[[16,38],17],[[]],[[]],[[]],[[]],[[],9],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[12,13],23],[[26,[14,[13]],[14,[36]]],26],[[32,17],32],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[]],[[]],[[8,2],3],[[8,2],3],[[]],[[]],[43,[[10,[26,8]]]],[[],9],[[],10],[[],10],[[],11],0,0,0,[[]],[[]],[13,13],[[]],[13],[[13,43],44],[[13,13],44],[[13,43],44],[[13,2],3],[[13,2],3],[[]],[43,13],[13],[[]],[13,[[40,[13]]]],[[]],[[],9],[[],10],[[],10],[[],11],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,[[45,30]],0,[46,40],[46,40],[47,43],[45,30],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[13,[48,[46]]],[[10,[46,5]]]],[[29,13],[[10,[31,[1,[31]]]]]],[49,49],[50,50],[25,25],[46,46],[47,47],[51,51],[[]],[[]],[[]],[[]],[[]],[[]],0,[[],[[29,[52]]]],[[],45],[[],53],[[],29],[[29,[14,[13]],54],30],[55,40],[53,[[48,[46]]]],[56,46],[[],29],[29],[57],[29],[57],[[46,42],44],[[46,44],44],[[46,46],44],[[46,39],44],[[47,47],44],[53,[[10,[30,5]]]],[[49,2],3],[[50,2],3],[[25,2],3],[[54,2],3],[[46,2],3],[[46,2],3],[[47,2],3],[[[29,[4]],2],3],[[[6,[4,4]],2],3],[[6,2],3],[[[58,[4,4]],2],3],[[5,2],3],[[5,2],3],[[59,2],3],[[[57,[4,4]],2],3],[[51,2],3],[[51,2],3],[[45,2],3],[[53,2],3],[[55,2],3],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[5,6],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[29,[[10,[5]]]],[29,[[10,[46,5]]]],[[53,30]],[[53,30]],0,[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[[]],[46,[[10,[56,46]]]],[53,44],[46,44],[[],44],[46,44],[[],43],[46,47],0,[53,30],[[47,47],44],[[30,30],29],[30,45],[[30,30],53],[[[0,[4,60]]],55],[46,[[40,[61]]]],[[46,46],[[40,[61]]]],[46,[[40,[44]]]],[53,[[10,[46,5]]]],[53,[[10,[5]]]],[[53,46],[[10,[5]]]],[53,30],[[29,13],[[40,[30]]]],[57,[[10,[6]]]],[[29,62],[[10,[31,[6,[31]]]]]],[[29,43],[[10,[31,[1,[31]]]]]],[29,53],0,[[],63],[45,63],[[]],[[]],[[]],[[]],[[]],[[]],[[],9],[[],9],[[],9],[[],9],[53,[[10,[46,5]]]],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[[],10],[55,[[10,[[0,[4,60]],55]]]],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],[[],11],0,0,[[29,[14,[13]],54],29],0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],"p":[[4,"Error"],[3,"Formatter"],[6,"Result"],[8,"Debug"],[4,"FaultKind"],[3,"Fault"],[4,"CompilationError"],[4,"ParseError"],[3,"String"],[4,"Result"],[3,"TypeId"],[3,"CodeBlockBuilder"],[3,"Symbol"],[8,"Into"],[4,"ScopeSymbol"],[3,"SyntaxTreeBuilder"],[3,"NodeId"],[4,"BinOpKind"],[8,"FnOnce"],[3,"ExpressionTree"],[3,"Call"],[3,"Label"],[3,"Variable"],[4,"IntermediateOp"],[4,"Comparison"],[3,"CodeUnit"],[3,"UnlinkedCodeUnit"],[3,"Function"],[3,"Bud"],[15,"usize"],[8,"FromStack"],[3,"If"],[3,"Block"],[3,"BinOp"],[3,"Assign"],[4,"Declaration"],[3,"Vec"],[8,"IntoIterator"],[15,"i64"],[4,"Option"],[8,"OptionalSymbol"],[15,"f64"],[15,"str"],[15,"bool"],[3,"Budgeted"],[4,"Value"],[4,"ValueKind"],[3,"Drain"],[4,"Instruction"],[4,"ValueSource"],[3,"Dynamic"],[8,"Default"],[3,"Stack"],[3,"Function"],[3,"DynamicFault"],[8,"DynamicValue"],[3,"PausedExecution"],[4,"FaultOrPause"],[3,"FaultStackFrame"],[8,"Display"],[4,"Ordering"],[4,"Cow"],[4,"ExecutionBehavior"],[13,"Parse"],[13,"Compilation"],[13,"Fault"],[13,"Compare"],[13,"UndefinedFunction"],[13,"Function"],[13,"Module"],[13,"JumpTo"],[13,"Compare"],[13,"Push"],[13,"PushCopy"],[13,"CopyToVariable"],[13,"Call"],[13,"CallInstance"],[13,"If"],[13,"Argument"],[13,"Variable"],[13,"Function"],[13,"Unexpected"],[8,"Environment"],[13,"Dynamic"],[13,"TypeMismatch"],[13,"UnknownFunction"],[13,"InvalidType"],[13,"Fault"],[13,"Pause"],[13,"JumpTo"],[13,"Compare"],[13,"Push"],[13,"PushCopy"],[13,"CopyToVariable"],[13,"Call"],[13,"CallInstance"],[13,"If"],[13,"Integer"],[13,"Real"],[13,"Boolean"],[13,"Dynamic"],[13,"Dynamic"],[13,"Argument"],[13,"Variable"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
